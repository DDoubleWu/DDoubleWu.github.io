<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DDoubleWu的博客</title>
  <icon>https://www.gravatar.com/avatar/689d99ecaa23522889df83a0f6c998c1</icon>
  <subtitle>吴会玩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ddoublewu.github.io/"/>
  <updated>2018-10-17T04:36:25.105Z</updated>
  <id>https://ddoublewu.github.io/</id>
  
  <author>
    <name>DDoubleWu</name>
    <email>ddoublewings@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT B 1013 数素数</title>
    <link href="https://ddoublewu.github.io/2018/10/17/PAT-B-1013-%E6%95%B0%E7%B4%A0%E6%95%B0/"/>
    <id>https://ddoublewu.github.io/2018/10/17/PAT-B-1013-数素数/</id>
    <published>2018-10-17T04:11:32.000Z</published>
    <updated>2018-10-17T04:36:25.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1013-数素数（20分）"><a href="#1013-数素数（20分）" class="headerlink" title="1013 数素数（20分）"></a>1013 数素数（20分）</h1><p>令 P​i​​ 表示第 i 个素数。现任给两个正整数 M≤N≤10​4​​，请输出 P​M​​ 到 P​N​​ 的所有素数。<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出 M 和 N，其间以空格分隔。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>输出从 P​M​​ 到 P​N​​ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">27</span></span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">17</span> <span class="number">19</span> <span class="number">23</span> <span class="number">29</span> <span class="number">31</span> <span class="number">37</span> <span class="number">41</span> <span class="number">43</span></span><br><span class="line"><span class="number">47</span> <span class="number">53</span> <span class="number">59</span> <span class="number">61</span> <span class="number">67</span> <span class="number">71</span> <span class="number">73</span> <span class="number">79</span> <span class="number">83</span> <span class="number">89</span></span><br><span class="line"><span class="number">97</span> <span class="number">101</span> <span class="number">103</span></span><br></pre></td></tr></table></figure><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点:"></a>关键点:</h2><ol><li><strong>判定素数</strong></li><li><strong>每十个数字一行</strong></li><li><strong>行末不得有多余空格</strong></li></ol><h2 id="习得知识点"><a href="#习得知识点" class="headerlink" title="习得知识点:"></a>习得知识点:</h2><p>素数的判定，只需查找至<strong>sqrt(num)</strong>即可<br>用法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;  <span class="comment">//做标记</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;<span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num%i == <span class="number">0</span>) &#123; flag = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"不是素数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"是素数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> M, N;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;     <span class="comment">//做标记</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;        <span class="comment">//素数个数</span></span><br><span class="line"><span class="keyword">int</span> i, num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> pr_num[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">pr_num[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (n&lt;<span class="number">10000</span>)</span><br><span class="line">&#123;   </span><br><span class="line">        <span class="comment">//判定素数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i&lt;=<span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num%i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) pr_num[n++] = num;</span><br><span class="line"><span class="keyword">else</span> flag = <span class="number">1</span>;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">n = <span class="number">1</span>;       </span><br><span class="line"><span class="keyword">for</span> (i = M<span class="number">-1</span>; i&lt;N<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//每十个一行</span></span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">10</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; pr_num[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pr_num[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pr_num[i];         <span class="comment">//行末无空格</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1013-数素数（20分）&quot;&gt;&lt;a href=&quot;#1013-数素数（20分）&quot; class=&quot;headerlink&quot; title=&quot;1013 数素数（20分）&quot;&gt;&lt;/a&gt;1013 数素数（20分）&lt;/h1&gt;&lt;p&gt;令 P​i​​ 表示第 i 个素数。现任给两个正整数 M≤N≤10​4​​，请输出 P​M​​ 到 P​N​​ 的所有素数。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1012 数字分类</title>
    <link href="https://ddoublewu.github.io/2018/10/17/PAT-B-1012-%E6%95%B0%E5%AD%97%E5%88%86%E7%B1%BB/"/>
    <id>https://ddoublewu.github.io/2018/10/17/PAT-B-1012-数字分类/</id>
    <published>2018-10-17T03:04:50.000Z</published>
    <updated>2018-10-17T04:33:41.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1012-数字分类（20分"><a href="#1012-数字分类（20分" class="headerlink" title="1012 数字分类（20分)"></a>1012 数字分类（20分)</h1><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li>A​1​​ = 能被 5 整除的数字中所有偶数的和；</li><li>A​2​​ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 n​1​​−n​2​​+n​3​​−n​4​​⋯；</li><li>A​3​​ = 被 5 除后余 2 的数字的个数；</li><li>A​4​​ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li>A​5​​ = 被 5 除后余 4 的数字中最大数字。<a id="more"></a></li></ul><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对给定的 N 个正整数，按题目要求计算 A​1​​~A​5​​ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。<br>若其中某一类数字不存在，则在相应位置输出 N。</p><h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">20</span> <span class="number">16</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">11</span> <span class="number">2</span> <span class="number">9.7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><h2 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N <span class="number">11</span> <span class="number">2</span> N <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>精确到小数点后一位</strong></li><li><strong>行末不得有多余的空格</strong></li><li><strong>A2可能出现求和为0的情况，但此时有数字满足A2条件</strong></li></ol><h2 id="习得知识点："><a href="#习得知识点：" class="headerlink" title="习得知识点："></a>习得知识点：</h2><p>采用头文件iomanip下的<code>setprecision()</code>用法精确位数<br>用法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">double</span> a = <span class="number">2.3333</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt; a;   <span class="comment">//精确到小数点后三位</span></span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, N,b;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; b%<span class="number">2</span>==<span class="number">0</span>) a[<span class="number">0</span>] += b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">5</span> == <span class="number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">1</span>] += b;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">1</span>] -= b;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">5</span> == <span class="number">2</span>) a[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">5</span> == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">num += <span class="number">1.0</span>;</span><br><span class="line">a[<span class="number">3</span>] += b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">5</span> ==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">4</span>]&lt;b) a[<span class="number">4</span>] = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (k&gt;<span class="number">0</span>&amp;&amp;i==<span class="number">1</span>&amp;&amp;a[i]==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt; <span class="number">0</span>&lt;&lt;<span class="string">' '</span>;     <span class="comment">//针对关键点3</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'N'</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; a[i]/num &lt;&lt;<span class="string">' '</span>;   <span class="comment">//针对关键点2，精确到小数点后一位</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//行末无空格</span></span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'N'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1012-数字分类（20分&quot;&gt;&lt;a href=&quot;#1012-数字分类（20分&quot; class=&quot;headerlink&quot; title=&quot;1012 数字分类（20分)&quot;&gt;&lt;/a&gt;1012 数字分类（20分)&lt;/h1&gt;&lt;p&gt;给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A​1​​ = 能被 5 整除的数字中所有偶数的和；&lt;/li&gt;
&lt;li&gt;A​2​​ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 n​1​​−n​2​​+n​3​​−n​4​​⋯；&lt;/li&gt;
&lt;li&gt;A​3​​ = 被 5 除后余 2 的数字的个数；&lt;/li&gt;
&lt;li&gt;A​4​​ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；&lt;/li&gt;
&lt;li&gt;A​5​​ = 被 5 除后余 4 的数字中最大数字。
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>C++数组</title>
    <link href="https://ddoublewu.github.io/2018/10/07/C-%E6%95%B0%E7%BB%84/"/>
    <id>https://ddoublewu.github.io/2018/10/07/C-数组/</id>
    <published>2018-10-07T01:59:35.000Z</published>
    <updated>2018-10-17T04:33:43.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><p>数组是一种数据格式，能够存储多个同类型的数值，每个值都存储在一个独立的数组元素中，计算机在内存中依次存储数组的各个元素。<br><br>要创建数组，可使用声明语句，数组声明应指出一下三点：</p><ul><li><strong>存储在每个元素中的值的类型</strong></li><li><strong>数组名</strong></li><li><strong>数组中的元素数</strong></li></ul><h2 id="简单变量声明"><a href="#简单变量声明" class="headerlink" title="简单变量声明"></a>简单变量声明</h2><p>使用数组声明来创建数组时，将采用静态联编，即数组长度在编译时设置<br>该种声明数组的通用格式如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typename</span> arrayName[arraySize];</span><br></pre></td></tr></table></figure></p><p>表达式arraySize指定元素数目，可以是整形常数（如10）或const值，也可以是常量表达式（如 <strong>8*sizeof(int)</strong>），即arraySize不能是变量。<br>ex：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> days[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></p><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>只有在定义数组的时候才可初始化，不能将一个数组赋给另一个数组：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> months[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;   <span class="comment">//okay</span></span><br><span class="line"><span class="keyword">int</span> months[<span class="number">5</span>];                 <span class="comment">//okay</span></span><br><span class="line"><span class="keyword">int</span> *p = years[<span class="number">5</span>];            <span class="comment">//okay</span></span><br></pre></td></tr></table></figure></p><p>初始化数组时，提供的值可以少于数组的元素数目，如果只对数组的一部分进行初始化，则编译器把其他元素设为0:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> days[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;          <span class="comment">//前两个元素为0</span></span><br><span class="line"><span class="keyword">int</span> cards[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;            <span class="comment">//全部为0</span></span><br></pre></td></tr></table></figure></p><p>若初始化数组时arraySize为空，C++编译器将计算元素个数。<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> things[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;    <span class="comment">//编译器将使其things数组包含4个元素</span></span><br></pre></td></tr></table></figure></p><h3 id="C-11数组的初始化方法"><a href="#C-11数组的初始化方法" class="headerlink" title="C++11数组的初始化方法"></a>C++11数组的初始化方法</h3><p>C++11中的列表初始化增加了一些功能<br>1.初始化数组时，可以省略等号（=)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> things[<span class="number">4</span>] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>2.可在大括号中不包含任何东西，将所有元素设置为0<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> cards[<span class="number">4</span>] &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>3.列表初始化禁止缩窄转换<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> plifs[] = &#123;<span class="number">25</span>,<span class="number">92</span>,<span class="number">3.0</span>&#125;;    <span class="comment">//not allowed</span></span><br><span class="line"><span class="keyword">char</span> tlifs[] = &#123;<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="number">112</span>&#125;;  <span class="comment">//allowed</span></span><br></pre></td></tr></table></figure></p><p>第一条不能通过编译，因为浮点型转化为整型时缩窄操作<br>第二条语句可以通过编译，因为虽然112是一个int值，但它在char变量的取值范围内<strong>(-128~127)</strong></p><h2 id="使用new创建动态数组"><a href="#使用new创建动态数组" class="headerlink" title="使用new创建动态数组"></a>使用new创建动态数组</h2><p>采用new[]运算符创建数组时，将采用动态联编，即在运行时为数组分配空间，其长度也将在运行时设置。</p><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><p>在C++中，只需要将数组的元素类型和元素数目告诉new即可<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];    <span class="comment">//创建一个包含10个int元素的数组</span></span><br></pre></td></tr></table></figure></p><p>new运算符返回第一个元素的地址<br>当程序使用完new分配的内存块时，应使用delete来释放它们。对于new创建的数组，应使用以下delete来释放：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] p;              <span class="comment">//方括号表示释放整个数组</span></span><br></pre></td></tr></table></figure></p><p><strong>如果new一个实体分配内存，则应使用delete(没有方括号)来释放</strong></p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>对于第一个元素，可以使用p[0],第二个元素为p[1]<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> *p = <span class="keyword">new</span> <span class="keyword">double</span> [<span class="number">2</span>];</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">p[<span class="number">1</span>] = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br></pre></td></tr></table></figure></p><h2 id="模板类vector创建"><a href="#模板类vector创建" class="headerlink" title="模板类vector创建"></a>模板类vector创建</h2><h3 id="vector初始化"><a href="#vector初始化" class="headerlink" title="vector初始化"></a>vector初始化</h3><p>模板类vector也是一种动态数组，可以在末尾添加新数据，还可以在中间添加新数据，基本上是使用new创建动态数组的替代品，要创建vector模板对象，可使用通常的<type>表示法来指出要使用的类型，还可用初始化参数来指出需要多少矢量<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ratings(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; scores(n);</span><br></pre></td></tr></table></figure></type></p><p>由于运算符[]被重载，因此创建vector对象后，可以使用通常的数组表示法来访问每个元素:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">retings[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;scores[i]&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><h3 id="vector基本用法"><a href="#vector基本用法" class="headerlink" title="vector基本用法"></a>vector基本用法</h3><p>所有STL容器都提供了一些基本方法，其中包括size()——返回容器中元素数目,swap()——交换两个容器的内容,begin()——返回一个指向容器中第一个元素的迭代器,end()——返回一个表示超过容器尾的迭代器。</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>采用<strong> push_back()</strong>可以将元素添加到末尾<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; scores;</span><br><span class="line"><span class="keyword">double</span> temp;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;temp &amp;&amp; temp &gt;=<span class="number">0</span>)</span><br><span class="line">  scores.push_back(temp);</span><br></pre></td></tr></table></figure></p><p>这样每次循环都会给scores对象添加一个元素，在编写或运程序时，无需了解元素的数目。只要能够取得足够的内存，程序就可以增加scores的长度。</p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>采用erase()方法删除矢量中给定区间的元素，他接受两个迭代器参数，这些参数定义了要删除的区间。第一个迭代器指向区间的起始处，第二个迭代器位于区间终止处的后一个位置。<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.erase(scores.begin(),scores.begin()+<span class="number">2</span>)   <span class="comment">//删除begin()到begin()+1的元素</span></span><br></pre></td></tr></table></figure></p><p>该区间为前闭后开，即[begin(),end()]包含的内容为[p1,p2)</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>使用insert()方法插入元素，insert()接收3个参数，第一个参数指定了新元素的插入位置，第二个和第三个迭代器参数定义了被插入区间，下面的代码将矢量new_d中除第一个元素外的所有元素插入到old_v矢量的第一个元素前面:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">old_v.insert(old_v.begin(),new_v.begin()+<span class="number">1</span>,new_v.end());</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      数组是一种数据格式，能够存储多个同类型的数值，每个值都存储在一个独立的数组元素中，计算机在内存中依次存储数组的各个元素。本文探讨C++实现数组功能的一些方式。
    
    </summary>
    
      <category term="C++" scheme="https://ddoublewu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="基础" scheme="https://ddoublewu.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
