<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DDoubleWu的博客</title>
  <icon>https://www.gravatar.com/avatar/689d99ecaa23522889df83a0f6c998c1</icon>
  <subtitle>吴会玩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ddoublewu.github.io/"/>
  <updated>2018-11-13T13:01:03.389Z</updated>
  <id>https://ddoublewu.github.io/</id>
  
  <author>
    <name>DDoubleWu</name>
    <email>ddoublewings@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构 (8)堆</title>
    <link href="https://ddoublewu.github.io/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-8-%E5%A0%86/"/>
    <id>https://ddoublewu.github.io/2018/11/13/数据结构-8-堆/</id>
    <published>2018-11-13T12:53:00.000Z</published>
    <updated>2018-11-13T13:01:03.389Z</updated>
    
    <content type="html"><![CDATA[<p><strong>若采用数组或链表实现优先队列</strong></p><ol><li><strong>数组</strong><br>插入：元素总是插入尾部   ~O(1)<br>删除：查找最大（或最小）关键字   ~O(n)<br>   从数组中删除需要移动的元素 ~O(n)</li><li><strong>链表</strong><br>插入：元素总是插入链表的头部   ~O(1)<br>删除：查找最大（或最小）关键字 ~O(n)<br>   删去结点               ~O(1)</li><li><strong>有序数组</strong><br>插入：找到合适的位置   ~O(n)或~O($ log_2n $)<br>删除：移动元素并插入   ~O(n)<br>   删去最后一个元素 ~O(1)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;若采用数组或链表实现优先队列&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt;&lt;br&gt;插入：元素总是插入尾部   ~O(1)&lt;br&gt;删除：查找最大（或最小）关键字   ~O(n)&lt;br&gt;   从数组中删除需要移动的元素 ~O
      
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (7)图</title>
    <link href="https://ddoublewu.github.io/2018/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-7-%E5%9B%BE/"/>
    <id>https://ddoublewu.github.io/2018/11/07/数据结构-7-图/</id>
    <published>2018-11-07T13:15:33.000Z</published>
    <updated>2018-11-07T13:16:18.666Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (6)树与二叉树</title>
    <link href="https://ddoublewu.github.io/2018/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-6-%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ddoublewu.github.io/2018/11/07/数据结构-6-树与二叉树/</id>
    <published>2018-11-07T13:14:33.000Z</published>
    <updated>2018-11-08T15:01:37.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>树是一种非线性的数据结构，它是若干结点的集合，是由唯一的根和若干棵互不相交的子树组成的。每一棵子树又是一棵树。树的定义是递归的，结点数为0的树称为空树。<br><a id="more"></a></p><h3 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h3><p><img src="/img/二叉树.jpg"><br><strong>结点:</strong> 结点不仅包含数据元素，而且包含指向子树的分支。A,B,C等都是结点。<br><strong>结点的度:</strong> 结点拥有的子树个数或者分支的个数。A结点有3棵子树，所以树的度为3.<br><strong>树的度:</strong> 树中各结点度的最大值<br><strong>叶子结点:</strong> 又叫做 <strong>终端结点</strong>，指度为0的结点,如F,C,D都为叶子结点。<br><strong>非终端结点:</strong> 又叫做分支结点，指度不为0的结点。除了根节点之外的非终端结点，也叫做内部结点，如B,D,E<br><strong>孩子:</strong> 结点的子树的根，如A结点的孩子为B,C,D。<br><strong>双亲:</strong> 与孩子的定义相对应，如B,C,D结点的双亲都为A<br><strong>兄弟:</strong> 同一个双亲的孩子之间互为兄弟,如B,C,D互为兄弟<br><strong>祖先:</strong> 从根到某结点的路径上的所有结点，都是这个结点的祖先，如A,B,E都为F结点的祖先<br><strong>子孙:</strong> 以某结点为根的子树中的所有结点，都是该结点的子孙，如E,F为B结点的子孙<br><strong>树的高度（或者深度）:</strong> 树中结点的最大层次，图中树共有4层，故高度为4。<br><strong>结点的深度和高度:</strong> </p><ol><li>结点的深度就是从根节点到该结点路径上的结点个数</li><li>从某结点往下走可能到达多个叶子结点，其中最长的那条路径的长度即为该结点在树中的高度。</li><li>根节点的高度为树的高度。如结点A，其高度为4，是从A到F这条路径的长度，也是整棵树的高度。</li></ol><p><strong>堂兄弟:</strong> 双亲在同一层的结点互为堂兄弟。如E和G互为堂兄弟。<br><strong>有序树:</strong> 树中结点的子树从左到右是有次序的，不能更换。<br><strong>无序树:</strong> 树中结点的子树没有顺序，可以随意交换。<br><strong>丰满树:</strong> 即理想平衡树，要求除最底层外，其他层都是满的。<br><strong>森林:</strong> 若干棵互不相交的输的集合。若把A去掉，剩下的3棵子树互不相交，它们组成一个森林。</p><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><p>树的存储结构最简单直观的是双亲存储结构，用一维数组就可以实现。<br>例：数组下标表示树中的结点，数组元素的内容表示该结点的双亲结点<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tree[maxSize];</span><br></pre></td></tr></table></figure></p><p><strong>注：树的双亲存储结构在克鲁斯卡尔算法中有重要的应用</strong> </p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>将一般的树加上两个限制条件就得到了二叉树：</p><ol><li><strong>每个结点多只有两棵子树，即二叉树中结点的度只能为0、1、2.</strong></li><li><strong>子树有左右顺序之分，不能颠倒。</strong></li></ol><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>在一棵二叉树中，如果所有的分支结点都有左孩子和右孩子结点，并且叶子结点都集中在二叉树的最下一层，则这样的二叉树就是一颗满二叉树。</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>通俗的说，一棵完全二叉树一定是由一棵满二叉树从左至右、从上至下，挨个删除结点所得到的。如果跳着删除，则得到的不是完全二叉树。</p><h3 id="二叉树的主要性质"><a href="#二叉树的主要性质" class="headerlink" title="二叉树的主要性质"></a>二叉树的主要性质</h3><p>设二叉树上叶子结点数为$ n_0 $,单分支结点数为$ n_1 $,双分支结点数为$ n_2 $，则总结点数$ n=n_0+n_1+n_2 $</p><ol><li><strong>非空二叉树上叶子结点数等于双分支结点数加1，即$ n_0=n_2+1 $</strong></li><li>在一棵二叉树中，所有结点的分支数等于单分支结点数加上双分支结点数的两倍，即<strong>总分支数为$ n_1+2n_2 $ </strong>。</li><li>由于二叉树中除根节点之外，每个结点都有唯一的一个分支指向它，因此二叉树中有<strong>总分支数=总结点数-1</strong><br>(该结论对任何树都是适用的)</li><li>二叉树中总结点为&amp;n&amp;，求树中空指针的数目，<strong>可以将所有的空指针看做叶子结点，则树中原有的所有结点都成了双分支结点</strong>。因此根据性质1可知，空指针数为树中所有结点数+1，即$n+1$。</li><li><strong>在一棵度为m的树中，叶子结点数为 $n_0=1+n_2+2n_3+…+(m-1)n_{m}$。</strong></li><li><strong>二叉树的第i层上最多有$2^{i-1}(i&gt;=1)$个结点</strong></li><li><strong>在高度（或深度）为k的二叉树最多有$ 2^{k}-1(k&gt;=1)$个结点。即满二叉树中前k层的结点个数为$2^k-1$</strong></li><li><strong>有n个结点的完全二叉树，对各结点从上到下、从左到右依次编号,各结点之间有如下关系：</strong><br>若i为某结点a的编号，则：<strong>(若编号从0开始则为括号内)</strong><br>如果i不等于1(0)，则a的双亲结点的编号为⌊i/2⌋(⌈i/2⌉-1)<br>如果2i&lt;=n,则a左孩子的编号为2i(2i+1);如果2i&gt;n；则a无左孩子<br>如果2i+1&lt;=n，则a右孩子的编号为2i+1(2i+2)；如果2i+1&gt;n，则a无右孩子<br><strong>注：开口向下表示大于真实值的最小整数。，开口向上表示小于真实值的最大整数</strong></li><li><strong>给定n个结点，能构成n个结点，能构成h(n)种不同的二叉树</strong>，$ h(n)= \frac{1}{n+1}C^{n}_{2n} $</li><li><strong>具有n(n&gt;=1)个结点的完全二叉树的高度（或深度）为$log_2n+1$ (另一种为$log_2(n+1)$)</strong></li></ol><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h4><p>顺序存储结构即是用一个数组来存储一棵二叉树，这种存储方式最适合于完全二叉树，用于存储一般二叉树会浪费大量的存储空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h2&gt;&lt;h3 id=&quot;树的定义&quot;&gt;&lt;a href=&quot;#树的定义&quot; class=&quot;headerlink&quot; title=&quot;树的定义&quot;&gt;&lt;/a&gt;树的定义&lt;/h3&gt;&lt;p&gt;树是一种非线性的数据结构，它是若干结点的集合，是由唯一的根和若干棵互不相交的子树组成的。每一棵子树又是一棵树。树的定义是递归的，结点数为0的树称为空树。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (5)数组、矩阵与广义表</title>
    <link href="https://ddoublewu.github.io/2018/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-5-%E6%95%B0%E7%BB%84%E3%80%81%E7%9F%A9%E9%98%B5%E4%B8%8E%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    <id>https://ddoublewu.github.io/2018/11/06/数据结构-5-数组、矩阵与广义表/</id>
    <published>2018-11-06T14:48:40.000Z</published>
    <updated>2018-11-07T16:19:04.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://ddoublewu.github.io/2018/11/01/KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://ddoublewu.github.io/2018/11/01/KMP算法/</id>
    <published>2018-11-01T09:50:07.000Z</published>
    <updated>2018-11-01T10:46:36.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>设i,j分别为主串和模式串中当前参与比较的两个字符的下标<br>当j处发生不匹配时，j重新指向的位置恰好是之前已匹配的子串前后相重合子串的长度+1，通常我们定义一个next[j]数组，其中j取1~m，m为模式串长度，表示模式串中第h个字符发生不匹配时，应从next[j]处的字符开始重新与主串比较</p><h3 id="next数组详解"><a href="#next数组详解" class="headerlink" title="next数组详解"></a>next数组详解</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法&quot;&gt;&lt;/a&gt;KMP算法&lt;/h2&gt;&lt;p&gt;设i,j分别为主串和模式串中当前参与比较的两个字符的下标&lt;br&gt;当j处发生不匹配时，j重新指向的位置恰好是之前已匹配
      
    
    </summary>
    
      <category term="算法" scheme="https://ddoublewu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://ddoublewu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (4)串</title>
    <link href="https://ddoublewu.github.io/2018/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-4-%E4%B8%B2/"/>
    <id>https://ddoublewu.github.io/2018/11/01/数据结构-4-串/</id>
    <published>2018-11-01T07:37:23.000Z</published>
    <updated>2018-11-06T14:16:25.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="串的定义"><a href="#串的定义" class="headerlink" title="串的定义"></a>串的定义</h2><p>串是零个或多个字符组成的有限序列。串中字符的个数称为串的长度，含有零个元素的串叫做空串。<br>串中任意连续的字符组成的子序列称为该串的子串，包含子串的串称为主串，通常用子串在主串中的第一个位置作为子串在主串中的位置。<br>由一个或多个空格组成的串称为空格串<br><a id="more"></a></p><h2 id="串的存储结构"><a href="#串的存储结构" class="headerlink" title="串的存储结构"></a>串的存储结构</h2><h3 id="定长顺序存储表示"><a href="#定长顺序存储表示" class="headerlink" title="定长顺序存储表示"></a>定长顺序存储表示</h3><p>定长顺序存储表示结构体定义如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Str</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> str[maxSize+<span class="number">1</span>];  <span class="comment">//maxSize为已定义的常量，表示串的最大长度</span></span><br><span class="line">                          <span class="comment">//str数组长度为maxSize+1，多出一个'\0'作为结束标记</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变长分配存储表示"><a href="#变长分配存储表示" class="headerlink" title="变长分配存储表示"></a>变长分配存储表示</h3><p>又叫动态分配表示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Str</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *ch;</span><br><span class="line">    <span class="keyword">int</span> length;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种存储方法在使用时，需要函数malloc来分配一个长度为length、类型的char型的连续存储空间，分配的空间可以用free()来释放</p><h2 id="串的基本操作"><a href="#串的基本操作" class="headerlink" title="串的基本操作"></a>串的基本操作</h2><h3 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strassign</span><span class="params">(Str &amp;str,<span class="keyword">char</span> &amp;ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.ch)</span><br><span class="line">        <span class="built_in">free</span>(str.ch);          <span class="comment">//释放原串空间</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *c = ch;</span><br><span class="line">    <span class="keyword">while</span>(*c)</span><br><span class="line">    &#123;</span><br><span class="line">        ++len;</span><br><span class="line">        ++c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str.ch = <span class="literal">NULL</span>;</span><br><span class="line">        str.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        str.ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(len+<span class="number">1</span>))</span><br><span class="line">        <span class="comment">//取len+1是为了多一个空间放'\0'</span></span><br><span class="line">        <span class="keyword">if</span>(str.ch == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c = ch;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i,++c)</span><br><span class="line">                str.ch[i]=*c;</span><br><span class="line">            str.length = len;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="串比较操作"><a href="#串比较操作" class="headerlink" title="串比较操作"></a>串比较操作</h3><p><strong>串比较操作时串排序应用里的核心操作</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcompare</span><span class="params">(Str s1,Str s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length&amp;&amp;i&lt;s2.length;++i)</span><br><span class="line">        <span class="keyword">if</span>(s1.ch[i]!=s2.ch[i])</span><br><span class="line">            <span class="keyword">return</span> s1.ch[i]-s2.ch[i];</span><br><span class="line">    <span class="keyword">return</span> s1.length - s2.length;      <span class="comment">//返回两串相等标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="串连接操作"><a href="#串连接操作" class="headerlink" title="串连接操作"></a>串连接操作</h3><p>将两个串首尾相接，合并成一个字符串的操作称为串连接操作<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">concat</span><span class="params">(Str &amp;str,Str str1,Str str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(str.ch);</span><br><span class="line">        str.ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str.ch = (<span class="keyword">char</span>*)mallco(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(str1.length+str2.length+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (str.ch == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;str1.length)</span><br><span class="line">    &#123;</span><br><span class="line">        str.ch[i] = str1.ch[i];</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;str2.length)</span><br><span class="line">    &#123;</span><br><span class="line">        str.ch[i+j] = str2.ch[j];</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    str.length = str1.length+str2.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="求子串操作"><a href="#求子串操作" class="headerlink" title="求子串操作"></a>求子串操作</h3><p>求str串中从pos位置开始，长度为len的子串，子串由substr返回给用户<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">substring</span><span class="params">(Str&amp; substr,Str str,<span class="keyword">int</span> pos,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;<span class="number">0</span>||pos&gt;=str.length||len&lt;<span class="number">0</span>||len&gt;str.length-pos)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(substr.ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(substr.ch);</span><br><span class="line">        substr.ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        substr.ch = <span class="literal">NULL</span>;</span><br><span class="line">        substr.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        substr.ch = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(len+<span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">int</span> i = pos;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;pos+len)</span><br><span class="line">        &#123;</span><br><span class="line">            substr.ch[++j] = str.ch[i];</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        substr.ch[j] = <span class="string">'\0'</span>;</span><br><span class="line">        substr.length = len;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="串清空操作"><a href="#串清空操作" class="headerlink" title="串清空操作"></a>串清空操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearstring</span><span class="params">(Str &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(str.ch);</span><br><span class="line">        str.ch = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;串的定义&quot;&gt;&lt;a href=&quot;#串的定义&quot; class=&quot;headerlink&quot; title=&quot;串的定义&quot;&gt;&lt;/a&gt;串的定义&lt;/h2&gt;&lt;p&gt;串是零个或多个字符组成的有限序列。串中字符的个数称为串的长度，含有零个元素的串叫做空串。&lt;br&gt;串中任意连续的字符组成的子序列称为该串的子串，包含子串的串称为主串，通常用子串在主串中的第一个位置作为子串在主串中的位置。&lt;br&gt;由一个或多个空格组成的串称为空格串&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (3)栈和队列</title>
    <link href="https://ddoublewu.github.io/2018/10/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://ddoublewu.github.io/2018/10/30/数据结构-3-栈和队列/</id>
    <published>2018-10-30T13:17:21.000Z</published>
    <updated>2018-11-01T07:42:23.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的基本概念"><a href="#栈的基本概念" class="headerlink" title="栈的基本概念"></a>栈的基本概念</h2><ol><li><strong>栈的定义</strong><br>栈是一种只能在一端进行插入或删除操作的线性表。其中允许进行插入和删除操作的一端成为栈顶(Top)。栈顶由一个称为栈顶指针的位置指示器来指示，它是动态变化的。表的另一端称为栈底，栈底是固定不变的。栈的插入和删除操作一般称为入栈和出栈。</li><li><strong>栈的特点</strong><br>栈的主要特点就是先进后出（后进先出）<strong>(FILO)</strong></li><li><strong>栈的存储结构</strong><br>栈按照存储结构可分为顺序栈和链栈，栈本质上是线性表。</li><li><strong>栈的数学性质</strong><br>当n个元素以某种顺序进栈，并且可在任意时刻出栈(在满足先进后出的前提下)时，所获得的元素排列的数目N恰好满足函数Catalan()的计算，即<script type="math/tex; mode=display">N = \frac{1}{n+1}C^{n}_{2n}</script><a id="more"></a><h2 id="队列的基本概念"><a href="#队列的基本概念" class="headerlink" title="队列的基本概念"></a>队列的基本概念</h2></li><li><strong>队列的定义</strong><br>队列简称队，是一种操作受限的线性表，其限制为仅允许在表的一端进行插入，在表的另一端进行删除。可进行插入的一端称为队尾(<strong>rear</strong>)，另一端称为队头(<strong>front</strong>)，向队列中插入新的元素称为入队，从队列中删除元素称为出队</li><li><strong>队列的特点</strong><br>先进先出(FIFO)</li><li><strong>队列的存储结构</strong><br>队列的存储结构分为顺序队和链队两种</li></ol><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><h3 id="顺序栈定义"><a href="#顺序栈定义" class="headerlink" title="顺序栈定义"></a>顺序栈定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SqStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxSize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链栈结点定义"><a href="#链栈结点定义" class="headerlink" title="链栈结点定义"></a>链栈结点定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    LNode *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序队列定义"><a href="#顺序队列定义" class="headerlink" title="顺序队列定义"></a>顺序队列定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SqQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxSize];</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队定义"><a href="#链队定义" class="headerlink" title="链队定义"></a>链队定义</h3><h4 id="队结点类型定义"><a href="#队结点类型定义" class="headerlink" title="队结点类型定义"></a>队结点类型定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    QNode *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链队类型定义"><a href="#链队类型定义" class="headerlink" title="链队类型定义"></a>链队类型定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LiQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QNode *front;</span><br><span class="line">    QNode *rear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><h3 id="顺序栈的要素"><a href="#顺序栈的要素" class="headerlink" title="顺序栈的要素"></a>顺序栈的要素</h3><p>对于顺序栈st，一共有4个要素，包含两个特殊状态和两个操作</p><ol><li><strong>栈空状态</strong><br>st.top == -1</li><li><strong>栈满状态</strong><br>st.top == maxSize-1</li><li><strong>非法状态(上溢和下溢)</strong></li><li><p><strong>元素x进栈操作</strong><br>先移动指针，再进入元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(++st.top);</span><br><span class="line">st.data[st.top] = x;</span><br></pre></td></tr></table></figure></li><li><p><strong>元素x出栈操作</strong><br>先取出元素，再移动指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = data[st.top];</span><br><span class="line">--(st.top);</span><br></pre></td></tr></table></figure></li></ol><h3 id="定义一个栈并初始化"><a href="#定义一个栈并初始化" class="headerlink" title="定义一个栈并初始化"></a>定义一个栈并初始化</h3><p>初始化一个栈，只需将栈顶指针设为-1即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[maxSize];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure></p><h3 id="进栈代码"><a href="#进栈代码" class="headerlink" title="进栈代码"></a>进栈代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> <span class="built_in">stack</span>[],<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == maxSize<span class="number">-1</span>) <span class="comment">//栈满不能进栈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>[++top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈代码"><a href="#出栈代码" class="headerlink" title="出栈代码"></a>出栈代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> <span class="built_in">stack</span>[],<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == <span class="number">-1</span>) <span class="comment">//栈满不能进栈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x = <span class="built_in">stack</span>[--top];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><h3 id="链栈的要素"><a href="#链栈的要素" class="headerlink" title="链栈的要素"></a>链栈的要素</h3><ol><li><strong>栈空状态:lst-&gt;next == NULL;</strong></li><li><strong>栈满状态</strong><br>假设内存无限大的情况下，栈满情况不存在</li><li><p><strong>元素进栈操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其实就是头插法建立链表中的插入操作</span></span><br><span class="line">p-&gt;next = lst-&gt;next;</span><br><span class="line">lst-&gt;next = p;</span><br></pre></td></tr></table></figure></li><li><p><strong>元素出栈操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈元素保存在x中</span></span><br><span class="line">p = lst-&gt;next;</span><br><span class="line">x = p-&gt;data;</span><br><span class="line">lst-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure></li></ol><h3 id="链栈的初始化操作"><a href="#链栈的初始化操作" class="headerlink" title="链栈的初始化操作"></a>链栈的初始化操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(LNode *&amp;lst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lst = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));   <span class="comment">//制造一个头结点</span></span><br><span class="line">    lst-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进栈代码-1"><a href="#进栈代码-1" class="headerlink" title="进栈代码"></a>进栈代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(LNode *lst,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    p = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//以下三句为链表的头插法</span></span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = lst-&gt;next;</span><br><span class="line">    lst-&gt;next = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈代码-1"><a href="#出栈代码-1" class="headerlink" title="出栈代码"></a>出栈代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(LNode *lst,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="keyword">if</span>(lst-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//以下为单链表的删除操作</span></span><br><span class="line">    p = lst-&gt;next;</span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    lst-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的具体应用"><a href="#栈的具体应用" class="headerlink" title="栈的具体应用"></a>栈的具体应用</h2><p>一个问题如果出现下述情况：在解决问题的过程中遇到一个子问题，但凭现有条件下不能解决它，需要记下，等待以后出现可以解决它的条件后再返回来解决。那么这种问题需要用栈来解决，因栈具有记忆的功能。</p><h3 id="顺序栈的应用"><a href="#顺序栈的应用" class="headerlink" title="顺序栈的应用"></a>顺序栈的应用</h3><ol><li><strong>编写算法，判断一个表达式中的括号（小括号）是否正确配对，表达式已经存入字符数组exp[]中，表达式中字符个数为n</strong><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> <span class="built_in">exp</span>[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*栈的定义与初始化*/</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">stack</span>[maxSize];</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">exp</span>[i] == <span class="string">'('</span>)    <span class="comment">//遇到(即入栈后再处理</span></span><br><span class="line">            <span class="built_in">stack</span>[++top] = <span class="string">'('</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">exp</span>[i] == <span class="string">')'</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(top == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                --top;  <span class="comment">//栈不空就出栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="链栈的应用"><a href="#链栈的应用" class="headerlink" title="链栈的应用"></a>链栈的应用</h3><h2 id="顺序队"><a href="#顺序队" class="headerlink" title="顺序队"></a>顺序队</h2><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><strong>假溢出:</strong> 顺序队中，front与rear指针最终到达数组末端maxSize-1处，虽然队中已经没有元素，但是仍然无法让元素进队<br>循环队列即把数组弄成一个环，让front与rear沿着环走</p><h4 id="循环队列的要素"><a href="#循环队列的要素" class="headerlink" title="循环队列的要素"></a>循环队列的要素</h4><ol><li><strong>队空状态:qu.rear == qu.front</strong></li><li><strong>队满状态:(qu.rear+1)%maxSize == qu.front</strong></li><li><p><strong>元素x进队操作:(移动队尾指针)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qu.rear = (qu.rear+<span class="number">1</span>)%maxSize;</span><br><span class="line">qu.data[qu.rear] = x;</span><br></pre></td></tr></table></figure></li><li><p><strong>元素x出队操作:（移动队首指针）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qu.front = (qu.front+<span class="number">1</span>)%maxSize;</span><br><span class="line">x = qu.data[qu.front];</span><br></pre></td></tr></table></figure></li></ol><h4 id="循环队列结点定义"><a href="#循环队列结点定义" class="headerlink" title="循环队列结点定义"></a>循环队列结点定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与顺序队一样</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cycQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxSize];</span><br><span class="line">    <span class="keyword">int</span> front,rear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化队列"><a href="#初始化队列" class="headerlink" title="初始化队列"></a>初始化队列</h4><p><strong>qu.rear = qu.front = 0</strong></p><h2 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h2><p>链队就是采用链式存储结构存储队列，采用单链表实现。<br>链队的特点就是不存在队列满上溢的情况(假设内存无限大)</p><h3 id="链队的要素"><a href="#链队的要素" class="headerlink" title="链队的要素"></a>链队的要素</h3><ol><li><strong>队空状态:lqu-&gt;rear==NULL或lqu-&gt;front==NULL</strong></li><li><strong>队满状态:不存在队满的状态（假设内存无限大的情况)</strong></li><li><p><strong>元素进队操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lqu-&gt;rear-&gt;next = p;</span><br><span class="line">lqu-&gt;rear = p;</span><br></pre></td></tr></table></figure></li><li><p><strong>元素出队操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = lqu-&gt;front;</span><br><span class="line">lqu-&gt;front = p-&gt;next;</span><br><span class="line">x = p-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure></li></ol><h3 id="初始化链队"><a href="#初始化链队" class="headerlink" title="初始化链队"></a>初始化链队</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lqu = （LiQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LiQueue));</span><br><span class="line">lqu-&gt;front = lqu-&gt;rear = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="入队算法"><a href="#入队算法" class="headerlink" title="入队算法"></a>入队算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(LiQueue *lqu,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNode *p;</span><br><span class="line">    p = (QNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(lqu-&gt;rear == <span class="literal">NULL</span>)</span><br><span class="line">        lqu-&gt;rear = lqu-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        lqu-&gt;rear-&gt;next = p;</span><br><span class="line">        lqu-&gt;rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队算法"><a href="#出队算法" class="headerlink" title="出队算法"></a>出队算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deQueue</span><span class="params">(LiQueue *lqu,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QNode *p;</span><br><span class="line">    <span class="keyword">if</span>(lqu-&gt;rear==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        p = lqu-&gt;front;</span><br><span class="line">    <span class="keyword">if</span>(lqu-&gt;front == lqu-&gt;rear)</span><br><span class="line">        lqu-&gt;rear = lqu-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lqu-&gt;front = lqu-&gt;front-&gt;next;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注:</strong> 尽量采用顺序队来解决问题，尽可能避免采用链队，除非题目明确要求要用链队</p><h2 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h2><p>共享栈主要是为了提高内存的利用率和减少溢出的可能性而设计的。<br>两个顺序栈共享一片连续的存储空间，这两个栈的栈底位于存储空间的两端。<br>当两栈顶相遇时，存储空间用尽，会产生上溢</p><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>双端队列是一种插入和删除在两侧都可进行的线性表，可把双端队列看成栈底连在一起的两个两个栈。两个栈的栈顶指针向两端延伸。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>假设元素进入双端队列的顺序是1,2,3,4<br>输入受限的双端队列不可能输出 4,2,1,3和4,2,3,1<br>输出受限的双端队列不可能输出 4,1,3,2和4,2,3,1<br>两者都不可能输出 4,2,3,1</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的基本概念&quot;&gt;&lt;a href=&quot;#栈的基本概念&quot; class=&quot;headerlink&quot; title=&quot;栈的基本概念&quot;&gt;&lt;/a&gt;栈的基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;栈的定义&lt;/strong&gt;&lt;br&gt;栈是一种只能在一端进行插入或删除操作的线性表。其中允许进行插入和删除操作的一端成为栈顶(Top)。栈顶由一个称为栈顶指针的位置指示器来指示，它是动态变化的。表的另一端称为栈底，栈底是固定不变的。栈的插入和删除操作一般称为入栈和出栈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;栈的特点&lt;/strong&gt;&lt;br&gt;栈的主要特点就是先进后出（后进先出）&lt;strong&gt;(FILO)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;栈的存储结构&lt;/strong&gt;&lt;br&gt;栈按照存储结构可分为顺序栈和链栈，栈本质上是线性表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;栈的数学性质&lt;/strong&gt;&lt;br&gt;当n个元素以某种顺序进栈，并且可在任意时刻出栈(在满足先进后出的前提下)时，所获得的元素排列的数目N恰好满足函数Catalan()的计算，即&lt;script type=&quot;math/tex; mode=display&quot;&gt;N = \frac{1}{n+1}C^{n}_{2n}&lt;/script&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (2)线性表</title>
    <link href="https://ddoublewu.github.io/2018/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://ddoublewu.github.io/2018/10/27/数据结构-2-线性表/</id>
    <published>2018-10-27T14:45:57.000Z</published>
    <updated>2018-10-30T13:16:28.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p>线性表是具有<strong>相同</strong>特性数据元素的一个<strong>有限</strong>序列,线性表可以是<strong>有序</strong>的，也可以是<strong>无序</strong>的。</p><h2 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h2><p>存储结构分为顺序存储结构和链式存储结构，前者成为顺序表，后者称为链表<br><a id="more"></a><br>顺序表是计算机内存中以数组形式保存的线性表</p><h3 id="顺序表的特性"><a href="#顺序表的特性" class="headerlink" title="顺序表的特性"></a>顺序表的特性</h3><ol><li><strong>随机访问特性</strong></li><li><strong>顺序表要求占用连续的存储空间，一次性分配</strong></li><li><strong>做插入或删除操作时，需移动多个元素</strong></li><li><strong>存储密度=1</strong></li></ol><h3 id="链表的特性"><a href="#链表的特性" class="headerlink" title="链表的特性"></a>链表的特性</h3><ol><li><strong>不支持随机访问</strong></li><li><strong>结点的存储空间利用率较顺序表稍低一些，存储密度小于1</strong></li><li><strong>支持存储空间的动态分配，多次分配</strong></li><li><strong>插入或删除元素时不需移动元素，只需修改指针</strong></li></ol><h3 id="链表的形式"><a href="#链表的形式" class="headerlink" title="链表的形式"></a>链表的形式</h3><p>链表由以下五种形式：</p><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p><strong>带头结点的单链表</strong><br>头结点指针head-&gt;next == NULL时，链表为空<br><strong>不带头结点的单链表</strong><br>指针head == NULL时，链表为空</p><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>在单链表的结点上增添一个指针域，指向当前结点的前驱<br>有头结点时，指针head-&gt;next == NULL时，链表为空<br>无头结点时，指针head == NULL时，链表为空</p><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><p>循环单链表可实现从任意结点出发访问链表内的任意结点<br>有头结点时，指针head-&gt;next == head时，链表为空<br>无头结点时，指针head == NULL时，链表为空</p><h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><p>不带头结点的循环双链表head-&gt;next == head时，链表为空<br>带头结点的满足以下任意一条即为空<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head-&gt;prior == head;</span><br><span class="line">head-&gt;next == head&amp;&amp;head-&gt;prior == head;</span><br><span class="line">head-&gt;next == head||head-&gt;prior == head;</span><br></pre></td></tr></table></figure></p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>静态链表借助一维数组表示，一般链表结点空间来自于整个内存，静态链表则来自于一个结构体数组。数组中每个结点含有两个分量：一个是数据元素分量data;另一个是指针分量，指示了当前结点的直接后继在数组中的位置<br><strong>注:</strong>静态链表的指针是一个存储数组下标的整形变量，通过它可以找到后集结点在数组中的位置，其功能类似于指针<br><strong>顺序表插入/删除移动元素的个数为(n-1)/2</strong> </p><h2 id="线性表的结构体定义"><a href="#线性表的结构体定义" class="headerlink" title="线性表的结构体定义"></a>线性表的结构体定义</h2><h3 id="顺序表的结构体定义"><a href="#顺序表的结构体定义" class="headerlink" title="顺序表的结构体定义"></a>顺序表的结构体定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"><span class="comment">//定义一个长度为n,表内元素为整数的顺序表</span></span><br><span class="line"><span class="keyword">int</span> A[maxSize];</span><br><span class="line"><span class="keyword">int</span> n;</span><br></pre></td></tr></table></figure><h3 id="单链表结点定义"><a href="#单链表结点定义" class="headerlink" title="单链表结点定义"></a>单链表结点定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;   </span><br><span class="line">  LNode *next;  <span class="comment">//指向后继节点的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="双链表结点定义"><a href="#双链表结点定义" class="headerlink" title="双链表结点定义"></a>双链表结点定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  LNode *prior;   <span class="comment">//指向前继结点的指针</span></span><br><span class="line">  LNode *next;    <span class="comment">//指向后继节点的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结点是内存中一片由用户分配的存储空间，只有一个地址来表示它的存在，没有显式的名称，因此在分配链表结点空间时，定义一个指针，来存储这片空间的地址（即指针指向结点），并通常用这个指针的名称来作为结点的名称</strong><br>例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LNode *A = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br></pre></td></tr></table></figure></p><p>这里A命名了两个东西：一个是结点，另一个是指向这个结点的指针。若出现”p指向q”，此时p指代指针又”用函数free()释放p的空间”,此时p代指结点。</p><h2 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h2><h3 id="按元素值的查找算法"><a href="#按元素值的查找算法" class="headerlink" title="按元素值的查找算法"></a>按元素值的查找算法</h3><p>在顺序表中查找第一个值等于e的元素，并返回其下标<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findElem</span><span class="params">(Sqlist L,<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(x==L.data[i]) </span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">//没找到，返回失败标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="插入数据元素的算法"><a href="#插入数据元素的算法" class="headerlink" title="插入数据元素的算法"></a>插入数据元素的算法</h3><p>在顺序表的第p(0&lt;=p&lt;=length)个位置上插入新的元素e。若输入正确，即将第p个元素及以后元素右移一个位置，腾出一个空位置插入新元素，顺序表长增加1。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertElem</span><span class="params">(Sqlist &amp;L,<span class="keyword">int</span> p,<span class="keyword">int</span> e)</span>  <span class="comment">//L本身要发生改变，所以用引用型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p,i;</span><br><span class="line">  <span class="keyword">if</span>(p&lt;<span class="number">0</span>||p&gt;L.length||L.length == maxSize)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)   <span class="comment">//从后往前，逐个后移一个位置</span></span><br><span class="line">    L.data[i+<span class="number">1</span>] = L.data[i];</span><br><span class="line">  L.data[p] = e;</span><br><span class="line">  ++(L.length);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;      <span class="comment">//插入成功，返回1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="删除元素的算法"><a href="#删除元素的算法" class="headerlink" title="删除元素的算法"></a>删除元素的算法</h3><p>与插入相似，只需将后面的逐个向前移动<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteElem</span><span class="params">(Sqlist &amp;L,<span class="keyword">int</span> p,<span class="keyword">int</span> &amp;e)</span> <span class="comment">//e也发生改变</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span>(p&lt;<span class="number">0</span>||p&gt;L.length||L.length == maxSize)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  e = data[p];</span><br><span class="line">  <span class="keyword">for</span>(i=p;i&lt;L.length;i++)   <span class="comment">//逐个前移</span></span><br><span class="line">    L.data[i] = L.data[i+<span class="number">1</span>];</span><br><span class="line">  --(L.length);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h2><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><p>假设已经有n个元素存储在数组a中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createlistR</span><span class="params">(LNode *&amp;C,<span class="keyword">int</span> a[];<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LNode * s,*r;    <span class="comment">//s用来指向新申请的结点，r始终指向C的终端结点</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  C = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  <span class="comment">//申请C的头结点空间</span></span><br><span class="line">  C-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  r = C;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="comment">//循环申请n个结点来接收a中的一个元素</span></span><br><span class="line">  &#123;</span><br><span class="line">    s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = a[i];</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = r-&gt;next;    <span class="comment">//r指向终端结点，以便于接纳下一个到来的结点</span></span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createlistF</span><span class="params">(LNode *&amp;C,<span class="keyword">int</span> a[];<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LNode * s;    <span class="comment">//s用来指向新申请的结点</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  C = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  <span class="comment">//申请C的头结点空间</span></span><br><span class="line">  C-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="comment">//循环申请n个结点来接收a中的一个元素</span></span><br><span class="line">  &#123;</span><br><span class="line">    s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = a[i];</span><br><span class="line">    s-&gt;next = C-&gt;next;</span><br><span class="line">    C-&gt;next = s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>头插法不断地将新结点插入前端，因此新建立的链表中元素的次序和数组a中的元素的次序是相反的。</strong><br>因此可以将头插法应用于将一个递增的链表转化为递减的<br>下例为将递增的链表A,B归并为一递减的链表C<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(LNode *A,LNode *B,LNode *&amp;C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LNode *p = A-&gt;next;  <span class="comment">//追踪A的最小值结点</span></span><br><span class="line">  LNode *q = B-&gt;next;  <span class="comment">//追踪B的最小值结点</span></span><br><span class="line">  LNode *s;</span><br><span class="line">  C = A;    <span class="comment">//C的头结点为A的头结点</span></span><br><span class="line">  C-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">free</span>(B);</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//头插法思想</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;data&lt;q-&gt;data) </span><br><span class="line">    &#123;</span><br><span class="line">      s = p;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      s-&gt;next = C-&gt;next;</span><br><span class="line">      C-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s = q;</span><br><span class="line">      q = q-&gt;next;</span><br><span class="line">      s-&lt;next = C-&gt;next;</span><br><span class="line">      C-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    s = p;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    s-&gt;next = C-&gt;next;</span><br><span class="line">    C-&gt;next = s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    s = q;</span><br><span class="line">    q = q-&gt;next;</span><br><span class="line">    s-&lt;next = C-&gt;next;</span><br><span class="line">    C-&gt;next = s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="单链表的插入算法核心即为"><a href="#单链表的插入算法核心即为" class="headerlink" title="单链表的插入算法核心即为"></a>单链表的插入算法核心即为</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//s为新结点，要插入在p结点之后</span></span><br><span class="line">s-&gt;next = p-&gt;next;  </span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure><h4 id="单链表删除的核心算法为"><a href="#单链表删除的核心算法为" class="headerlink" title="单链表删除的核心算法为"></a>单链表删除的核心算法为</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p为被删除元素前一个元素</span></span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure><h2 id="双链表的操作"><a href="#双链表的操作" class="headerlink" title="双链表的操作"></a>双链表的操作</h2><h3 id="采用尾插法建立双链表"><a href="#采用尾插法建立双链表" class="headerlink" title="采用尾插法建立双链表"></a>采用尾插法建立双链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDlistR</span><span class="params">(DLNode *&amp;L,<span class="keyword">int</span> a[];<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DLNode * s,*r;  </span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  L = (DLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLNode));</span><br><span class="line">  L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  r = L;     <span class="comment">//r指向终端结点</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    s = (DLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLNode));</span><br><span class="line">    s-&gt;data = a[i];</span><br><span class="line">    <span class="comment">//采用尾插法</span></span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    s-&gt;prior = r;</span><br><span class="line">    r = s;</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="采用头插法建立双链表"><a href="#采用头插法建立双链表" class="headerlink" title="采用头插法建立双链表"></a>采用头插法建立双链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDlistF</span><span class="params">(DLNode <span class="number">8</span>&amp;L,<span class="keyword">int</span> a[];<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DLNode *s;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  L = (DLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLNode));</span><br><span class="line">  L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    s = (DLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLNode));</span><br><span class="line">    s-&gt;data = a[i]; </span><br><span class="line">    <span class="comment">//采用头插法</span></span><br><span class="line">    s-&gt;next = L-&gt;next;</span><br><span class="line">    L-&gt;next = s;</span><br><span class="line">    s-&gt;prior = L;</span><br><span class="line">    s-&gt;next-&gt;prior = s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h4 id="双链表插入结点的核心算法为："><a href="#双链表插入结点的核心算法为：" class="headerlink" title="双链表插入结点的核心算法为："></a>双链表插入结点的核心算法为：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设在双链表中p所指结点之后插入一个结点s，其操作语句如下：</span></span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">s-&gt;next-&gt;prior = s;   <span class="comment">//假设p指向最后一个结点，则本行可以去掉</span></span><br></pre></td></tr></table></figure><h4 id="删除结点的算法"><a href="#删除结点的算法" class="headerlink" title="删除结点的算法"></a>删除结点的算法</h4><p>假设要删除p的后继结点<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure></p><h2 id="循环链表的操作"><a href="#循环链表的操作" class="headerlink" title="循环链表的操作"></a>循环链表的操作</h2><p>循环单链表终端结点的next结点指针指向表头结点<br>循环双链表终端结点的next指针指向表头结点，头结点的prior指针指向表尾结点</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>有序表中的有序是逻辑意义上的有序，指表中元素按某种规则已经排好了位置<br>顺序表中的顺序是物理意义上的，指线性表中的元素一个接一个的存储在一片相邻的存储区域中</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性表的定义&quot;&gt;&lt;a href=&quot;#线性表的定义&quot; class=&quot;headerlink&quot; title=&quot;线性表的定义&quot;&gt;&lt;/a&gt;线性表的定义&lt;/h2&gt;&lt;p&gt;线性表是具有&lt;strong&gt;相同&lt;/strong&gt;特性数据元素的一个&lt;strong&gt;有限&lt;/strong&gt;序列,线性表可以是&lt;strong&gt;有序&lt;/strong&gt;的，也可以是&lt;strong&gt;无序&lt;/strong&gt;的。&lt;/p&gt;
&lt;h2 id=&quot;线性表的存储结构&quot;&gt;&lt;a href=&quot;#线性表的存储结构&quot; class=&quot;headerlink&quot; title=&quot;线性表的存储结构&quot;&gt;&lt;/a&gt;线性表的存储结构&lt;/h2&gt;&lt;p&gt;存储结构分为顺序存储结构和链式存储结构，前者成为顺序表，后者称为链表&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1040 有几个PAT</title>
    <link href="https://ddoublewu.github.io/2018/10/26/PAT-B-1040-%E6%9C%89%E5%87%A0%E4%B8%AAPAT/"/>
    <id>https://ddoublewu.github.io/2018/10/26/PAT-B-1040-有几个PAT/</id>
    <published>2018-10-26T14:04:41.000Z</published>
    <updated>2018-10-26T14:09:37.170Z</updated>
    
    <content type="html"><![CDATA[<p>（25分）字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。<br>现给定字符串，问一共可以形成多少个 PAT？<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入只有一行，包含一个字符串，长度不超过10​5​​，只包含 P、A、T 三种字母。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPAPT</span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>对PAT数量的统计</strong></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考文章:(<a href="https://www.cnblogs.com/asinlzm/p/4440603.html" target="_blank" rel="noopener">https://www.cnblogs.com/asinlzm/p/4440603.html</a>)<br><strong>核心思路:</strong> 如果有一个P出现，则只要知道后面有多少种AT可选，则这个P可以对应的PAT选择方法就有多少种；AT类似。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> at_num, t_num, pat_num, n;</span><br><span class="line">pat_num = at_num = t_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span> (str[n] == <span class="string">'T'</span>) ++t_num;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str[n] == <span class="string">'A'</span>) at_num += t_num;</span><br><span class="line"><span class="keyword">else</span> num += at_num;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">1000000007</span>) num %= <span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（25分）字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。&lt;br&gt;现给定字符串，问一共可以形成多少个 PAT？&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 (1)绪论</title>
    <link href="https://ddoublewu.github.io/2018/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1-%E7%BB%AA%E8%AE%BA/"/>
    <id>https://ddoublewu.github.io/2018/10/26/数据结构-1-绪论/</id>
    <published>2018-10-25T16:57:55.000Z</published>
    <updated>2018-10-29T17:13:11.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><ol><li><strong>数据</strong><br>数据是指所有能输入到计算机中并且被计算机程序处理的符号的总称</li><li><strong>数据元素</strong><br>数据元素是数据的基本单位，可由若干数据项组成</li><li><strong>数据项</strong><br>数据项是数据结构中讨论的最小单位<a id="more"></a></li><li><strong>数据对象</strong><br>数据对象是性质相同的数据元素的集合，是数据的一个子集。例如，大写字母就是一个数据对象，大写字母数据对象是集合{‘A’,’B’,…,’Z’}</li><li><strong>数据结构</strong><br>数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。数据结构包括3方面的内容：逻辑结构、存储结构和对数据的运算。</li><li><strong>数据的逻辑结构</strong><br>数据的逻辑结构是对数据之间的关系的描述,归纳起来数据的逻辑结构主要由以下两大类：<br><strong>（1）线性结构</strong><br>线性结构指数据元素间存在着“一对一”的线性关系的数据结构。<br><strong>（2）非线性结构</strong><br>非线性结构中的结点存在着一对多的关系，它可以细分为树形结构和图形结构。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构和算法&quot;&gt;&lt;a href=&quot;#数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法&quot;&gt;&lt;/a&gt;数据结构和算法&lt;/h1&gt;&lt;h2 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 基本概念&quot;&gt;&lt;/a&gt;1. 基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;br&gt;数据是指所有能输入到计算机中并且被计算机程序处理的符号的总称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据元素&lt;/strong&gt;&lt;br&gt;数据元素是数据的基本单位，可由若干数据项组成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据项&lt;/strong&gt;&lt;br&gt;数据项是数据结构中讨论的最小单位
    
    </summary>
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ddoublewu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="计算机408" scheme="https://ddoublewu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA408/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT习得知识点总结</title>
    <link href="https://ddoublewu.github.io/2018/10/25/PAT%E4%B9%A0%E5%BE%97%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://ddoublewu.github.io/2018/10/25/PAT习得知识点总结/</id>
    <published>2018-10-25T14:29:18.000Z</published>
    <updated>2018-11-01T07:36:35.610Z</updated>
    
    <content type="html"><![CDATA[<p>整理PAT中习得的知识点</p><h2 id="1-精确到小数点后一位"><a href="#1-精确到小数点后一位" class="headerlink" title="1. 精确到小数点后一位"></a>1. 精确到小数点后一位</h2><p>采用头文件iomanip下的setprecision()用法精确位数<br><a id="more"></a></p><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">2.3333</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt; a;   <span class="comment">//精确到小数点后三位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出:"></a>输出:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.333</span></span><br></pre></td></tr></table></figure><h2 id="2-素数的判定"><a href="#2-素数的判定" class="headerlink" title="2. 素数的判定"></a>2. 素数的判定</h2><p>素数的判定，只需查找至<strong>sqrt(num)</strong>即可</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法:"></a>用法:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;  <span class="comment">//做标记</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;=<span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num%i == <span class="number">0</span>) &#123; flag = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"不是素数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">"是素数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出:"></a>输出:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span>不是素数</span><br></pre></td></tr></table></figure><h2 id="3-字符转化"><a href="#3-字符转化" class="headerlink" title="3. 字符转化"></a>3. 字符转化</h2><h3 id="大小写字母转化"><a href="#大小写字母转化" class="headerlink" title="大小写字母转化"></a>大小写字母转化</h3><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法:"></a>用法:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>)(<span class="string">'Z'</span> + <span class="number">32</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>)(<span class="string">'a'</span> - <span class="number">32</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h3 id="将单个数字字符转化为数字"><a href="#将单个数字字符转化为数字" class="headerlink" title="将单个数字字符转化为数字"></a>将单个数字字符转化为数字</h3><h4 id="用法：-1"><a href="#用法：-1" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">5</span>-(<span class="string">'2'</span> - <span class="number">48</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="数字与字符串的相互转换"><a href="#数字与字符串的相互转换" class="headerlink" title="数字与字符串的相互转换"></a>数字与字符串的相互转换</h3><p>采用C++的stringstream,需头文件sstream</p><h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法:"></a>用法:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">174.44</span>;</span><br><span class="line"><span class="built_in">string</span> res;</span><br><span class="line"><span class="built_in">stringstream</span> ss; <span class="comment">//数字转化为字符串</span></span><br><span class="line">ss &lt;&lt; num;</span><br><span class="line">ss &gt;&gt; res;       <span class="comment">//或 res = ss.str(); </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">174.44</span></span><br></pre></td></tr></table></figure><h2 id="4-数组中元素排序"><a href="#4-数组中元素排序" class="headerlink" title="4. 数组中元素排序"></a>4. 数组中元素排序</h2><p>采用sort()函数，需头文件algorithm</p><h3 id="语法描述："><a href="#语法描述：" class="headerlink" title="语法描述："></a>语法描述：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort(begin,end,cmp)                      <span class="comment">//cmp参数可以没有，如果没有默认为非降序排序</span></span><br><span class="line">sort(begin,end,less&lt;data-type&gt;());       <span class="comment">//升序</span></span><br><span class="line">sort(begin,end,greater&lt;data-type&gt;());    <span class="comment">//降序</span></span><br></pre></td></tr></table></figure><h3 id="用法1："><a href="#用法1：" class="headerlink" title="用法1："></a>用法1：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span> &#125;;</span><br><span class="line">sort(A, A + <span class="number">5</span>);                      <span class="comment">//升序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出1："><a href="#输出1：" class="headerlink" title="输出1："></a>输出1：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="用法2"><a href="#用法2" class="headerlink" title="用法2:"></a>用法2:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mooncake</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> num;          </span><br><span class="line">&#125;cakes[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Mooncake a, Mooncake b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num&gt;b.num;         <span class="comment">//降序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,n = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) cakes[i].num = i + <span class="number">1</span>;</span><br><span class="line">sort(cakes, cakes + n, cmp);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n; i++) <span class="built_in">cout</span> &lt;&lt; cakes[i].num;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出2"><a href="#输出2" class="headerlink" title="输出2:"></a>输出2:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">54321</span></span><br></pre></td></tr></table></figure><h2 id="5-输出指定位数"><a href="#5-输出指定位数" class="headerlink" title="5. 输出指定位数"></a>5. 输出指定位数</h2><p>采用printf()函数,需头文件cstdio</p><h3 id="用法-3"><a href="#用法-3" class="headerlink" title="用法:"></a>用法:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>] = &#123; <span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'v'</span>,<span class="string">'e'</span>,<span class="string">'\0'</span> &#125;;</span><br><span class="line">a = <span class="number">189</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%4d\n"</span>, a);                       <span class="comment">//输出4位十进制整数，左边补空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%04d\n"</span>, a);                      <span class="comment">//输出4位十进制整数，左边补0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%-4d\n"</span>, a);                      <span class="comment">//输出4位十进制整数，右边补空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"s=%s\n"</span>, s);                      <span class="comment">//输出数组字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出:"></a>输出:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a= <span class="number">189</span></span><br><span class="line">a=<span class="number">0189</span></span><br><span class="line">a=<span class="number">189</span></span><br><span class="line">s=love</span><br></pre></td></tr></table></figure><h2 id="6-对年月日大小的比较"><a href="#6-对年月日大小的比较" class="headerlink" title="6. 对年月日大小的比较"></a>6. 对年月日大小的比较</h2><p>参考文章: <a href="https://blog.csdn.net/daniel960601/article/details/55261196" target="_blank" rel="noopener">https://blog.csdn.net/daniel960601/article/details/55261196</a><br>即year <em>  10000 + month </em>  100 + day，即可比较大小，数值小的年龄大。</p><h2 id="7-四舍五入"><a href="#7-四舍五入" class="headerlink" title="7. 四舍五入"></a>7. 四舍五入</h2><p>c++数学取整函数(返回值为浮点型)，需头文件math.h:</p><ol><li>ceil(x):返回不小于x的最小整数值</li><li>floor(x):返回不大于x的最小整数值</li><li>round(x):四舍五入<h3 id="用法：-2"><a href="#用法：-2" class="headerlink" title="用法："></a>用法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">ceil</span>(x / <span class="number">2.0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">floor</span>(x / <span class="number">2.0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; round(x / <span class="number">2.0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="输出：-2"><a href="#输出：-2" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="8-统计字符串中的字符数时，转化为数字处理"><a href="#8-统计字符串中的字符数时，转化为数字处理" class="headerlink" title="8. 统计字符串中的字符数时，转化为数字处理"></a>8. 统计字符串中的字符数时，转化为数字处理</h2><h3 id="用法：-3"><a href="#用法：-3" class="headerlink" title="用法："></a>用法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s;</span><br><span class="line"><span class="keyword">int</span> record[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;     <span class="comment">//将所有字符转化为数字来处理</span></span><br><span class="line"><span class="keyword">while</span> ((s = getchar()) != <span class="string">'\n'</span>) record[(<span class="keyword">int</span>)s]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">128</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (record[i]&gt;<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(i) &lt;&lt; <span class="string">':'</span> &lt;&lt; record[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入:"></a>输入:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love you</span><br></pre></td></tr></table></figure><h3 id="输出：-3"><a href="#输出：-3" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> :<span class="number">2</span></span><br><span class="line">I:<span class="number">1</span></span><br><span class="line">e:<span class="number">1</span></span><br><span class="line">l:<span class="number">1</span></span><br><span class="line">o:<span class="number">2</span></span><br><span class="line">u:<span class="number">1</span></span><br><span class="line">v:<span class="number">1</span></span><br><span class="line">y:<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="9-输入一整行字符串"><a href="#9-输入一整行字符串" class="headerlink" title="9. 输入一整行字符串"></a>9. 输入一整行字符串</h2><p>采用getline()函数</p><h3 id="用法：-4"><a href="#用法：-4" class="headerlink" title="用法："></a>用法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> s2;</span><br><span class="line"><span class="built_in">cin</span>.getline(s1, <span class="number">10</span>);      <span class="comment">//输入char[]</span></span><br><span class="line">getline(<span class="built_in">cin</span>, s2);         <span class="comment">//输入string</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love u</span><br><span class="line">I love you</span><br></pre></td></tr></table></figure><h3 id="输出：-4"><a href="#输出：-4" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love u</span><br><span class="line">I love you</span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理PAT中习得的知识点&lt;/p&gt;
&lt;h2 id=&quot;1-精确到小数点后一位&quot;&gt;&lt;a href=&quot;#1-精确到小数点后一位&quot; class=&quot;headerlink&quot; title=&quot;1. 精确到小数点后一位&quot;&gt;&lt;/a&gt;1. 精确到小数点后一位&lt;/h2&gt;&lt;p&gt;采用头文件iomanip下的setprecision()用法精确位数&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="基础" scheme="https://ddoublewu.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1043 输出PATest</title>
    <link href="https://ddoublewu.github.io/2018/10/25/PAT-B-1043-%E8%BE%93%E5%87%BAPATest/"/>
    <id>https://ddoublewu.github.io/2018/10/25/PAT-B-1043-输出PATest/</id>
    <published>2018-10-25T14:03:04.000Z</published>
    <updated>2018-10-25T14:27:37.954Z</updated>
    
    <content type="html"><![CDATA[<p>（20分）给定一个长度不超过 $ {10^4}​​ $的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 PATestPATest…. 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出一个长度不超过 ${10^4}​​$ 的、仅由英文字母构成的非空字符串。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redlesPayBestPATTopTeePHPereatitAPPT</span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATestPATestPTetPTePePee</span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>建立字符数组,统计其各字符出现次数</strong></li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j,max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">10000</span>],A[<span class="number">6</span>] = &#123;<span class="string">'P'</span>,<span class="string">'A'</span>,<span class="string">'T'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> num[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;str[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(str[i]==A[j]) num[j]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(max&lt;num[j]) max = num[j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;max;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(num[j]&gt;i) <span class="built_in">cout</span>&lt;&lt;A[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（20分）给定一个长度不超过 $ {10^4}​​ $的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 PATestPATest…. 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1042 字符统计</title>
    <link href="https://ddoublewu.github.io/2018/10/25/PAT-B-1042-%E5%AD%97%E7%AC%A6%E7%BB%9F%E8%AE%A1/"/>
    <id>https://ddoublewu.github.io/2018/10/25/PAT-B-1042-字符统计/</id>
    <published>2018-10-25T14:02:37.000Z</published>
    <updated>2018-10-25T14:15:17.224Z</updated>
    
    <content type="html"><![CDATA[<p>（20分）请编写程序，找出一段给定文字中出现最频繁的那个英文字母。</p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。<br><a id="more"></a></p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a simple TEST.  There ARE numbers <span class="keyword">and</span> other symbols <span class="number">1</span>&amp;<span class="number">2</span>&amp;<span class="number">3.</span>..........</span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e <span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点:"></a>关键点:</h2><ol><li><strong>将字符转化为数字处理</strong></li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> i, max, k;</span><br><span class="line">max = k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> record[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">cin</span>.getline(str, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; str[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] &gt;= <span class="string">'A'</span>&amp;&amp;str[i] &lt;= <span class="string">'Z'</span>) record[(<span class="keyword">int</span>)(str[i] + <span class="number">32</span>)]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str[i] &gt;= <span class="string">'a'</span>&amp;&amp;str[i] &lt;= <span class="string">'z'</span>) record[(<span class="keyword">int</span>)str[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">128</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (record[i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (max&lt;record[i]) &#123; max = record[i]; k = i; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>)k &lt;&lt; <span class="string">' '</span> &lt;&lt; max;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（20分）请编写程序，找出一段给定文字中出现最频繁的那个英文字母。&lt;/p&gt;
&lt;h2 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h2&gt;&lt;p&gt;输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1041 考试座位号</title>
    <link href="https://ddoublewu.github.io/2018/10/25/PAT-B-1041-%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7/"/>
    <id>https://ddoublewu.github.io/2018/10/25/PAT-B-1041-考试座位号/</id>
    <published>2018-10-25T10:47:06.000Z</published>
    <updated>2018-10-25T14:15:16.566Z</updated>
    
    <content type="html"><![CDATA[<p>（15分）每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：准考证号 试机座位号 考试座位号。其中准考证号由 14 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。<br>考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">10120150912233</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">10120150912119</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">10120150912126</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">10120150912002</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10120150912002</span> <span class="number">2</span></span><br><span class="line"><span class="number">10120150912119</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">14</span>];</span><br><span class="line"><span class="keyword">int</span> test, exam;</span><br><span class="line">&#125;admin[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N, M, i, j, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;N; i++) <span class="built_in">cin</span> &gt;&gt; admin[i].num &gt;&gt; admin[i].test &gt;&gt; admin[i].exam;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;M; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;N; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (admin[j].test == n) <span class="built_in">cout</span> &lt;&lt; admin[j].num &lt;&lt; <span class="string">' '</span> &lt;&lt; admin[j].exam &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（15分）每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1039 到底买不买</title>
    <link href="https://ddoublewu.github.io/2018/10/25/PAT-B-1039-%E5%88%B0%E5%BA%95%E4%B9%B0%E4%B8%8D%E4%B9%B0/"/>
    <id>https://ddoublewu.github.io/2018/10/25/PAT-B-1039-到底买不买/</id>
    <published>2018-10-25T10:35:29.000Z</published>
    <updated>2018-11-07T16:19:05.627Z</updated>
    
    <content type="html"><![CDATA[<p>（20分）小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。<br>为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。<br><a id="more"></a><br><img src="https://images.ptausercontent.com/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg" alt="图1"></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>如果可以买，则在一行中输出 Yes 以及有多少多余的珠子；如果不可以买，则在一行中输出 No 以及缺了多少珠子。其间以 1 个空格分隔。</p><h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ppRYYGrrYBR2258</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ppRYYGrrYB225</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><h2 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>将所有字符转化为数字处理</strong></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s;</span><br><span class="line"><span class="keyword">int</span> record[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;     <span class="comment">//将所有字符转化为数字来处理</span></span><br><span class="line"><span class="keyword">int</span> more, less,i;</span><br><span class="line">more = less = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((s = getchar())!= <span class="string">'\n'</span>) record[(<span class="keyword">int</span>)s]++;</span><br><span class="line"><span class="keyword">while</span> ((s = getchar()) != <span class="string">'\n'</span>) record[(<span class="keyword">int</span>)s]--;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">128</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (record[i]&lt;<span class="number">0</span>) less -= record[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (record[i]&gt;<span class="number">0</span>) more += record[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (less&gt;<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt;<span class="string">' '</span>&lt;&lt; less;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt;<span class="string">' '</span>&lt;&lt; more;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（20分）小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。&lt;br&gt;为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1038 统计同成绩学生</title>
    <link href="https://ddoublewu.github.io/2018/10/24/PAT-B-1038-%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%88%90%E7%BB%A9%E5%AD%A6%E7%94%9F/"/>
    <id>https://ddoublewu.github.io/2018/10/24/PAT-B-1038-统计同成绩学生/</id>
    <published>2018-10-23T16:14:41.000Z</published>
    <updated>2018-10-25T14:28:24.729Z</updated>
    
    <content type="html"><![CDATA[<p>（20分）本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。</p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第 1 行给出不超过 ${10^​5​​} $的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。<br><a id="more"></a></p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">60</span> <span class="number">75</span> <span class="number">90</span> <span class="number">55</span> <span class="number">75</span> <span class="number">99</span> <span class="number">82</span> <span class="number">90</span> <span class="number">75</span> <span class="number">50</span></span><br><span class="line"><span class="number">3</span> <span class="number">75</span> <span class="number">90</span> <span class="number">88</span></span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>最后一测试点N较大，代码需简洁</strong></li><li><strong>按查询顺序输出</strong></li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, N, K, num, s[<span class="number">101</span>] = &#123; <span class="number">0</span> &#125;;   <span class="comment">//num为成绩</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">s[num]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;K);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; K; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (i != K - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>, s[num]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, s[num]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（20分）本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。&lt;/p&gt;
&lt;h2 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h2&gt;&lt;p&gt;输入在第 1 行给出不超过 ${10^​5​​} $的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1037 在霍格沃茨找零钱</title>
    <link href="https://ddoublewu.github.io/2018/10/24/PAT-B-1037-%E5%9C%A8%E9%9C%8D%E6%A0%BC%E6%B2%83%E8%8C%A8%E6%89%BE%E9%9B%B6%E9%92%B1/"/>
    <id>https://ddoublewu.github.io/2018/10/24/PAT-B-1037-在霍格沃茨找零钱/</id>
    <published>2018-10-23T16:14:15.000Z</published>
    <updated>2018-10-23T16:33:43.485Z</updated>
    
    <content type="html"><![CDATA[<p>（20分）如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在 1 行中分别给出 P 和 A，格式为 Galleon.Sickle.Knut，其间用 1 个空格分隔。这里 Galleon 是 [0, 10​7​​] 区间内的整数，Sickle 是 [0, 17) 区间内的整数，Knut 是 [0, 29) 区间内的整数。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。</p><h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10.16</span><span class="number">.27</span> <span class="number">14.1</span><span class="number">.28</span></span><br></pre></td></tr></table></figure><h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h2 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14.1</span><span class="number">.28</span> <span class="number">10.16</span><span class="number">.27</span></span><br></pre></td></tr></table></figure><h2 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-3.2</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>没带够钱的情况</strong></li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> G, S, K, g, s, k;</span><br><span class="line"><span class="keyword">int</span> a, b, c,x,y,z;       <span class="comment">//a,b,c分别为加隆，银西可，纳克的值 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d.%d.%d"</span>, &amp;G, &amp;S, &amp;K);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d.%d.%d"</span>, &amp;g, &amp;s, &amp;k);</span><br><span class="line">    <span class="comment">//x,y,z存储g,s,k的值，即实付的金额</span></span><br><span class="line">x = g; y = s; z = k;</span><br><span class="line">c = k - K;</span><br><span class="line"><span class="keyword">if</span> (c&lt;<span class="number">0</span>) &#123; s--; c += <span class="number">29</span>; &#125;</span><br><span class="line">b = s - S;</span><br><span class="line"><span class="keyword">if</span> (b&lt;<span class="number">0</span>) &#123; g--; b += <span class="number">17</span>; &#125;</span><br><span class="line">a = g - G;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d.%d.%d"</span>, a, b, c);</span><br><span class="line">    <span class="comment">//没带够钱的情况</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c = K - z;</span><br><span class="line"><span class="keyword">if</span> (c&lt;<span class="number">0</span>) &#123; S--; c += <span class="number">29</span>; &#125;</span><br><span class="line">b = S - y;</span><br><span class="line"><span class="keyword">if</span> (b&lt;<span class="number">0</span>) &#123; G--; b += <span class="number">17</span>; &#125;</span><br><span class="line">a = G - x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-%d.%d.%d"</span>, a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（20分）如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1036 跟奥巴马一起编程</title>
    <link href="https://ddoublewu.github.io/2018/10/24/PAT-B-1036-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B/"/>
    <id>https://ddoublewu.github.io/2018/10/24/PAT-B-1036-跟奥巴马一起编程/</id>
    <published>2018-10-23T16:12:46.000Z</published>
    <updated>2018-10-23T16:33:44.663Z</updated>
    
    <content type="html"><![CDATA[<p>（15分）美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> a</span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>四舍五入</strong></li></ol><h2 id="习得的方法"><a href="#习得的方法" class="headerlink" title="习得的方法:"></a>习得的方法:</h2><p>c++数学取整函数(返回值为浮点型)，需头文件math.h:</p><ol><li>ceil(x):返回不小于x的最小整数值</li><li>floor(x):返回不大于x的最小整数值</li><li>round(x):四舍五入<br>例：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">ceil</span>(x / <span class="number">2.0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">floor</span>(x / <span class="number">2.0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; round(x / <span class="number">2.0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>输出：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N, i, j, num;</span><br><span class="line"><span class="keyword">char</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N&gt;&gt;s;</span><br><span class="line">num = (<span class="keyword">int</span>)round(N/<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> || i == num <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;N - <span class="number">1</span>; j++) <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j&lt;N - <span class="number">1</span>; j++) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（15分）美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1032 挖掘机技术哪家强</title>
    <link href="https://ddoublewu.github.io/2018/10/22/PAT-B-1032-%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/"/>
    <id>https://ddoublewu.github.io/2018/10/22/PAT-B-1032-挖掘机技术哪家强/</id>
    <published>2018-10-22T15:44:53.000Z</published>
    <updated>2018-10-22T15:50:14.099Z</updated>
    
    <content type="html"><![CDATA[<p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第 1 行给出不超过 10​5​​ 的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。<br><a id="more"></a></p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">65</span></span><br><span class="line"><span class="number">2</span> <span class="number">80</span></span><br><span class="line"><span class="number">1</span> <span class="number">100</span></span><br><span class="line"><span class="number">2</span> <span class="number">70</span></span><br><span class="line"><span class="number">3</span> <span class="number">40</span></span><br><span class="line"><span class="number">3</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>最后一个测试点运行时间较长，代码需简洁</strong></li></ol><h2 id="习得的知识点："><a href="#习得的知识点：" class="headerlink" title="习得的知识点："></a>习得的知识点：</h2><p>简单声明数组不可将变量作为size，但vector可行<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N, i, n, m,max = <span class="number">0</span>;          <span class="comment">//m为total数组下标，max为队伍编号最大值</span></span><br><span class="line"><span class="keyword">int</span> max_s = <span class="number">0</span>;                   <span class="comment">//max_s为最大总分</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num(N), score(N),total(N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i]&gt;&gt;score[i];</span><br><span class="line"><span class="keyword">if</span> (max &lt; num[i]) max = num[i];</span><br><span class="line">m = num[i];</span><br><span class="line">total[m - <span class="number">1</span>] += score[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (max_s&lt;total[i])</span><br><span class="line">&#123;</span><br><span class="line">max_s = total[i];</span><br><span class="line">n = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">' '</span> &lt;&lt; max_s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。&lt;/p&gt;
&lt;h2 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h2&gt;&lt;p&gt;输入在第 1 行给出不超过 10​5​​ 的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PAT B 1031 查验身份证</title>
    <link href="https://ddoublewu.github.io/2018/10/22/PAT-B-1031-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81/"/>
    <id>https://ddoublewu.github.io/2018/10/22/PAT-B-1031-查验身份证/</id>
    <published>2018-10-22T15:36:53.000Z</published>
    <updated>2018-10-22T15:42:52.737Z</updated>
    
    <content type="html"><![CDATA[<p>（15分）一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：<br>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：<br>Z：0 1 2 3 4 5 6 7 8 9 10<br>M：1 0 X 9 8 7 6 5 4 3 2<br>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。<br><a id="more"></a></p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出All passed。</p><h2 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">320124198808240056</span></span><br><span class="line"><span class="number">12010</span>X198901011234</span><br><span class="line"><span class="number">110108196711301866</span></span><br><span class="line"><span class="number">37070419881216001</span>X</span><br></pre></td></tr></table></figure><h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12010</span>X198901011234</span><br><span class="line"><span class="number">110108196711301866</span></span><br><span class="line"><span class="number">37070419881216001</span>X</span><br></pre></td></tr></table></figure><h2 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">320124198808240056</span></span><br><span class="line"><span class="number">110108196711301862</span></span><br></pre></td></tr></table></figure><h2 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All passed</span><br></pre></td></tr></table></figure><h2 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h2><ol><li><strong>校验码的检验</strong></li><li><strong>X为10</strong></li></ol><h2 id="出现的错误："><a href="#出现的错误：" class="headerlink" title="出现的错误："></a>出现的错误：</h2><p>看题看成了输出正确的…</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N, i, j, z;</span><br><span class="line"><span class="keyword">int</span> num, n;</span><br><span class="line"><span class="keyword">int</span> por[<span class="number">17</span>] = &#123; <span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> M[<span class="number">11</span>] = &#123; <span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'X'</span>,<span class="string">'9'</span>,<span class="string">'8'</span>,<span class="string">'7'</span>,<span class="string">'6'</span>,<span class="string">'5'</span>,<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'2'</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> str, s[<span class="number">100</span>];</span><br><span class="line">num = n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;<span class="number">17</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[j] == <span class="string">'X'</span>) num += <span class="number">10</span> * por[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str[j]&gt;=<span class="string">'0'</span>&amp;&amp;str[j]&lt;=<span class="string">'9'</span>) num += (str[j] - <span class="number">48</span>)*por[j];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">  num = <span class="number">0</span>; </span><br><span class="line">  s[n++] = str; </span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">z = num % <span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span> ( M[z] != str[<span class="number">17</span>]) s[n++] = str;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"All"</span> &lt;&lt; <span class="string">' '</span>&lt;&lt; <span class="string">"passed"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;n; i++) <span class="built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（15分）一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：&lt;br&gt;首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：&lt;br&gt;Z：0 1 2 3 4 5 6 7 8 9 10&lt;br&gt;M：1 0 X 9 8 7 6 5 4 3 2&lt;br&gt;现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。&lt;br&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://ddoublewu.github.io/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://ddoublewu.github.io/tags/PAT/"/>
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="笔记" scheme="https://ddoublewu.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
