<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DDoubleWu的博客</title>
  <icon>https://www.gravatar.com/avatar/689d99ecaa23522889df83a0f6c998c1</icon>
  <subtitle>吴会玩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ddoublewu.github.io/"/>
  <updated>2018-10-10T13:52:15.203Z</updated>
  <id>https://ddoublewu.github.io/</id>
  
  <author>
    <name>DDoubleWu</name>
    <email>ddoublewings@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++数组</title>
    <link href="https://ddoublewu.github.io/2018/10/07/C-%E6%95%B0%E7%BB%84/"/>
    <id>https://ddoublewu.github.io/2018/10/07/C-数组/</id>
    <published>2018-10-07T01:59:35.000Z</published>
    <updated>2018-10-10T13:52:15.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><p>数组是一种数据格式，能够存储多个同类型的数值，每个值都存储在一个独立的数组元素中，计算机在内存中依次存储数组的各个元素。<br><br>要创建数组，可使用声明语句，数组声明应指出一下三点：</p><ul><li><strong>存储在每个元素中的值的类型</strong></li><li><strong>数组名</strong></li><li><strong>数组中的元素数</strong></li></ul><h2 id="简单变量声明"><a href="#简单变量声明" class="headerlink" title="简单变量声明"></a>简单变量声明</h2><p>使用数组声明来创建数组时，将采用静态联编，即数组长度在编译时设置<br>该种声明数组的通用格式如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typename</span> arrayName[arraySize];</span><br></pre></td></tr></table></figure></p><p>表达式arraySize指定元素数目，可以是整形常数（如10）或const值，也可以是常量表达式（如 <strong>8*sizeof(int)</strong>），即arraySize不能是变量。<br>ex：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> days[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></p><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>只有在定义数组的时候才可初始化，不能将一个数组赋给另一个数组：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> months[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;   <span class="comment">//okay</span></span><br><span class="line"><span class="keyword">int</span> months[<span class="number">5</span>];                 <span class="comment">//okay</span></span><br><span class="line"><span class="keyword">int</span> *p = years[<span class="number">5</span>];            <span class="comment">//okay</span></span><br></pre></td></tr></table></figure></p><p>初始化数组时，提供的值可以少于数组的元素数目，如果只对数组的一部分进行初始化，则编译器把其他元素设为0:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> days[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;          <span class="comment">//前两个元素为0</span></span><br><span class="line"><span class="keyword">int</span> cards[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;            <span class="comment">//全部为0</span></span><br></pre></td></tr></table></figure></p><p>若初始化数组时arraySize为空，C++编译器将计算元素个数。<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> things[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;    <span class="comment">//编译器将使其things数组包含4个元素</span></span><br></pre></td></tr></table></figure></p><h3 id="C-11数组的初始化方法"><a href="#C-11数组的初始化方法" class="headerlink" title="C++11数组的初始化方法"></a>C++11数组的初始化方法</h3><p>C++11中的列表初始化增加了一些功能<br>1.初始化数组时，可以省略等号（=)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> things[<span class="number">4</span>] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>2.可在大括号中不包含任何东西，将所有元素设置为0<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> cards[<span class="number">4</span>] &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>3.列表初始化禁止缩窄转换<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> plifs[] = &#123;<span class="number">25</span>,<span class="number">92</span>,<span class="number">3.0</span>&#125;;    <span class="comment">//not allowed</span></span><br><span class="line"><span class="keyword">char</span> tlifs[] = &#123;<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="number">112</span>&#125;;  <span class="comment">//allowed</span></span><br></pre></td></tr></table></figure></p><p>第一条不能通过编译，因为浮点型转化为整型时缩窄操作<br>第二条语句可以通过编译，因为虽然112是一个int值，但它在char变量的取值范围内<strong>(-128~127)</strong></p><h2 id="使用new创建动态数组"><a href="#使用new创建动态数组" class="headerlink" title="使用new创建动态数组"></a>使用new创建动态数组</h2><p>采用new[]运算符创建数组时，将采用动态联编，即在运行时为数组分配空间，其长度也将在运行时设置。</p><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><p>在C++中，只需要将数组的元素类型和元素数目告诉new即可<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];    <span class="comment">//创建一个包含10个int元素的数组</span></span><br></pre></td></tr></table></figure></p><p>new运算符返回第一个元素的地址<br>当程序使用完new分配的内存块时，应使用delete来释放它们。对于new创建的数组，应使用以下delete来释放：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] p;              <span class="comment">//方括号表示释放整个数组</span></span><br></pre></td></tr></table></figure></p><p><strong>如果new一个实体分配内存，则应使用delete(没有方括号)来释放</strong></p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>对于第一个元素，可以使用p[0],第二个元素为p[1]<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> *p = <span class="keyword">new</span> <span class="keyword">double</span> [<span class="number">2</span>];</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">p[<span class="number">1</span>] = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">delete</span> [] p;</span><br></pre></td></tr></table></figure></p><h2 id="模板类vector创建"><a href="#模板类vector创建" class="headerlink" title="模板类vector创建"></a>模板类vector创建</h2><h3 id="vector初始化"><a href="#vector初始化" class="headerlink" title="vector初始化"></a>vector初始化</h3><p>模板类vector也是一种动态数组，可以在末尾添加新数据，还可以在中间添加新数据，基本上是使用new创建动态数组的替代品，要创建vector模板对象，可使用通常的<type>表示法来指出要使用的类型，还可用初始化参数来指出需要多少矢量<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ratings(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; scores(n);</span><br></pre></td></tr></table></figure></type></p><p>由于运算符[]被重载，因此创建vector对象后，可以使用通常的数组表示法来访问每个元素:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">retings[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;scores[i]&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><h2 id="vector基本用法"><a href="#vector基本用法" class="headerlink" title="vector基本用法"></a>vector基本用法</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>采用<strong> push_back()</strong>可以将元素添加到末尾<br>ex:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; scores;</span><br><span class="line"><span class="keyword">double</span> temp;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;temp &amp;&amp; temp &gt;=<span class="number">0</span>)</span><br><span class="line">  scores.push_back(temp);</span><br></pre></td></tr></table></figure></p><p>这样每次循环都会给scores对象添加一个元素，在编写或运程序时，无需了解元素的数目。只要能够取得足够的内存，程序就可以增加scores的长度</p><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>采用erase()方法删除矢量中给定区间的元素，他接受两个迭代器参数，这些参数定义了要删除的区间。第一个迭代器指向区间的起始处，第二个迭代器位于区间终止处的后一个位置。<br>ex:<br><code>`</code>c++<br>scores.erase(scores.begin(),scores.begin()+2)   //删除begin()到begin()+1的元素</p>]]></content>
    
    <summary type="html">
    
      数组是一种数据格式，能够存储多个同类型的数值，每个值都存储在一个独立的数组元素中，计算机在内存中依次存储数组的各个元素。本文探讨C++实现数组功能的一些方式。
    
    </summary>
    
      <category term="C++" scheme="https://ddoublewu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://ddoublewu.github.io/tags/C/"/>
    
      <category term="基础" scheme="https://ddoublewu.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
